# -*- coding: utf-8 -*-
"""app

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/15v5BW3LwDmvUoiPaMWqJNbv6jXEdR1yd
"""

import streamlit as st
import numpy as np
import matplotlib.pyplot as plt
from tensorflow.keras.models import load_model

# Load the trained model
model = load_model("rnn_sequence_model.h5")

st.set_page_config(page_title="RNN Sequence Predictor", layout="centered")
st.title("🔮 RNN Sequence Predictor")
st.markdown("This app uses a trained **SimpleRNN model** to predict the next number in a sequence.")

# User input
user_input = st.text_input("Enter a numeric sequence (comma-separated)", "1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20")

# Convert to numpy array
try:
    sequence = [int(x.strip()) for x in user_input.split(",")]
    sequence_np = np.array(sequence)
    window_size = 3

    if len(sequence) < window_size:
        st.warning("⚠️ Please enter at least 3 numbers.")
    else:
        # Prepare data for prediction
        X = []
        y = []

        for i in range(len(sequence_np) - window_size):
            X.append(sequence_np[i:i + window_size])
            y.append(sequence_np[i + window_size])

        X = np.array(X).reshape((len(X), window_size, 1))
        y = np.array(y)

        # Predict full sequence
        y_pred = model.predict(X, verbose=0).flatten()

        # Predict next number
        last_input = np.array(sequence_np[-window_size:]).reshape((1, window_size, 1))
        next_value = model.predict(last_input, verbose=0)[0][0]

        st.success(f"✅ Predicted next number after [{sequence_np[-3:]}] is: **{next_value:.2f}**")

        # Plotting
        st.subheader("📈 Sequence Prediction Visualization")

        fig, ax = plt.subplots(figsize=(10, 5))
        ax.plot(range(window_size, window_size + len(y)), y, label="Actual", marker='o')
        ax.plot(range(window_size, window_size + len(y_pred)), y_pred, label="Predicted", linestyle='--', marker='x')
        ax.set_title("SimpleRNN Sequence Prediction")
        ax.set_xlabel("Time Step")
        ax.set_ylabel("Value")
        ax.grid(True)
        ax.legend()
        st.pyplot(fig)

except Exception as e:
    st.error(f"❌ Error: {e}")